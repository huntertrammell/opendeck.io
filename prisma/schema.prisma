datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.VarChar(500)
    access_token             String? @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}

model User {
    id          String       @id @default(cuid())
    name        String?
    email       String?      @unique
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    password    String?
    image         String?
    emailVerified DateTime?
    cards         Card[]
    accounts      Account[]
    sessions      Session[]
}

model Card {
    id          Int       @id @default(autoincrement())
    title       String?
    description String?
    image_path  String?
    createdAt     DateTime  @default(now())
    attack      Attack[]
    xp          Int?
    user        User     @relation(fields: [user_id], references: [id])
    user_id     String
}

model Attack {
    id          Int       @id @default(autoincrement())
    title       String?
    type        String?
    description String?
    ap          Int?
    card        Card    @relation(fields: [card_id], references: [id])
    card_id     Int
}